###################################################################################################
Andrew Brown's senior capstone project, Fall 2020
This readme explains what each file associated with the capstone project is and how it works.
For the write up of the capstone experience as whole, read CS_capstone_ABrown.docx


Folder/File map:
htmlApp/
	bluebckrnd.jfif
	lock.jpg
	LockOperator.html
	unlock.jpg
LockOperator/ (Android Studio Project folder, 190 subfolders and 485 files, 24.2MB total)
Pi/
	allowed_code.txt
	lastProcessedComment.txt
	Lock_Functions.py
	log.txt
	server_data_processor.py
	validUsers.txt
androidAppDemo.mp4
androidAppDemo.txt
CS_capstone_ABrown.docx
htmlAppDemo.mp4
htmlAppDemo.txt
lockDemo.mp4
lockDemo.txt
README.txt


Notes:

This is the URL of the website I used for communication with the Raspberry Pi (987 characters long)
https://app.commentsplugin.com/widget-wix?instance=C7JcykXUlONvBj5dxez3Y7w0S7htnRFTW-HSupScI48.eyJp
bnN0YW5jZUlkIjoiM2MxZmNjZjAtYzViYS00ZGY5LWJmMWEtODRhOTFkOWEwODI5IiwiYXBwRGVmSWQiOiIxMzAxNjU4OS1hOWV
iLTQyNGEtOGE2OS00NmNiMDVjZTBiMmMiLCJzaWduRGF0ZSI6IjIwMjAtMTAtMjJUMDA6MzE6NDkuOTYwWiIsImRlbW9Nb2RlIj
pmYWxzZSwiYWlkIjoiYzU0ODM0NDAtMDFlOS00YjgzLWI2NjctOGQ1MmEzZWUzMjQwIiwic2l0ZU93bmVySWQiOiI0NTI5YjQ0Z
C1iYmJmLTQyNzQtODFjMi0wZDdkNWQwYWJhNzUifQ&pageId=za9wj&compId=comp-kfvqswnt&viewerCompId=comp-kfvqs
wnt&siteRevision=14&viewMode=site&deviceType=desktop&locale=en&commonConfig=%7B%22brand%22%3A%22wix
%22%2C%22bsi%22%3A%2210f5cd0a-b438-4e2b-8064-3b0812cb7c56%7C1%22%2C%22consentPolicy%22%3A%7B%22esse
ntial%22%3Atrue%2C%22functional%22%3Atrue%2C%22analytics%22%3Atrue%2C%22advertising%22%3Atrue%2C%22
dataToThirdParty%22%3Atrue%7D%2C%22consentPolicyHeader%22%3A%7B%7D%7D&tz=America%2FChicago&vsi=1e99
5a45-6401-497d-9eb2-dcaa8bfa417a&currency=USD&currentCurrency=USD&width=500&height=168

The android app was tested on two devices:
Google Pixle 2 on Android Version 10
LG Stylo 3 Plus on Android Version 7


File Explanations:

htmlApp/bluebckrnd.jfif, htmlApp/lock.jpg, htmlApp/unlock.jpg
	These are visual resource files used by LockOperator.html

htmlApp/LockOperator.html
	This is an application designed to communicate with the Raspberry Pi and send requests to lock
	or unlock the door. There is a place for the user to enter their username, and then they can
	select a button to either lock or unlock the door. The original purpose was that when a button
	was clicked, a request would be posted to the website which the Raspberry Pi would then read
	and execute. The code to post the request to the website was unable to be written (see capstone
	write up) so instead, when lock or unlock is selected, the code that should be posted is
	generated by the JavaScript, and then it is automatically copied to the user's clipboard. This
	way they can simply go to the website, paste the code in and press comment.
	If a user selects lock or unlock without first entering a username, then the code will not be
	created, and they will be asked to enter a username first.
	
LockOperator/
	This is an android studio project folder, it contains all the files needed to continue working
	on this project in the android studio environment. An apk file can be created from this folder
	in android studio.
	The app is designed to be able to send lock and unlock requests to the pi as well as read the
	log file that is stored on the pi. This app had the same issue of being able to post to the
	website that the html app had, so when the code is generated it is displayed as a toast
	message. Because no data could be transfered across the website either, the log file that the
	app reads was copied from the Pi at a previous date and uploaded as a resource in the project
	folder. This was done so that the functionality of reading a text file in the app could be used
	and tested.
	The main screen of the app is very similar to the html application, there is a place for a
	username, and a button for lock and unlock. A user must enter a username in order for the
	buttons to generate the code for the Pi. The View Log button will take the user to a second
	activity where they can read the log file from the Pi in a scrollable view.

Pi/allowed_code.txt
	This file is used by server_data_processor.py It is a text file that contains a whitelist of what
	code is allowed to be run by the Raspberry Pi from the website.
	Any Code not in this list will not be allowed to be run, this is done for security reasons.
	Each valid code segment should be on its own line with no other punctuation.

Pi/lastProcessedComment.txt
	This file is used by server_data_processor.py to keep track of the most recent comment that
	it processed so that a comment will not be processed multiple times. It is stored in a
	separate file so that if the script is stopped and restarted, it will still not reprocess
	an already processed comment.

Pi/Lock_Functions.py
	This file contains the python functions that lock and unlock the door.
	It should be included by any files that need to operate the locking mechanism.
	These functions access the GPIO on the Raspberry Pi in order to change the duty cycle on the
	connected servo motor. They will safely move the servo to the correct location and deactivate
	the servo afterwards so it is not over strained or over heated.

Pi/log.txt
	This is the log file that server_data_processor.py writes to.
	It contains a message for every comment that is processed by the script, each separated by one
	line of whitespace.
	Each log block has the following format:
	
	Comment processed on yyyy-mm-dd at hh:mm
	User: 'username' Note: (Optional, explains if the username was invalid)
	Request Time: yyyy-mm-dd hh:mm:ss Note: (Optional, explains if the time was invalid)
	Code: 'code' Note: (Optional, explains if the code was invalid)
	Summary of the comment, explains whether or not the request went through
	
	The file contains many logs from throughout the testing of the project, reading them will help
	gain a better understanding of the different messages you may see.
	
Pi/server_data_processor.py
	This is the main script to be run on the Raspberry Pi. It consists of many helper functions,
	and one main infinite loop. The script should be run 24/7, and it will constantly look for new
	comments on the website, once it sees a new comment, it will process it, lock or unlock the
	door accordingly (or neither) and write to the log file describing what occurred.
	This script uses Lock_Functions.py, lastProcessedComment.txt, validUsers.txt, allowed_code.txt,
	and log.txt
	The script connects to the website, downloads the webpage, extracts the comments from the raw
	html, and then determines what to do with the most recent comment. Since these comments will
	contain code to be executed by the script, there are many security checks in place to ensure
	that everything is valid before it is allowed to be processed.
	
	Functions defined in the script: getSoup(url_as_str), extractComments(some_soup),
	lastProcessedComment(), updateLastProcessedComment(comment_string), checkUser(username)
	checkReqTime(request_time), checkCode(code), extractUser(comment_string),
	extractReqTime(comment_string), extractCode(comment_string), and
	writeLog(uf, rf, cf, u, r, c, uv, rv, cv, et)
	
	The script was tested to see how fast it connected to the website, downloaded the html and
	processed the comments. The average speed over several tests was 5.187 times per second.
	This was an encouraging number, because the response time for locking and unlocking the door
	is desired to be very quick, unfortunately, the website being used has quite a bit of delay
	between the time a comment is sent for posting, and the time it is actually posted. This caused
	delays in the overall process of anywhere from 10 to 120 seconds in most tests.

Pi/validUsers.txt
	This file is used by server_data_processor.py to keep a list of usernames that will be allowed
	to send requests to the locking mechanism. If the requesting username is not on this list, its
	request will not be allowed to be acted on.
	Each valid username should be on its own line with no other punctuation.

androidAppDemo.mp4
	Video demo of the android app. There is no audio. The video is explained in androidAppDemo.txt
	
androidAppDemo.txt
	This file explains what the androidAppDemo.mp4 video is about, and then has a brief paragraph
	summarizing what happens in the video.
	
CS_capstone_ABrown.docx
	A word document write up of Andrew's senior capstone experience; the things he learned and the
	challenges he faced.

htmlAppDemo.mp4
	Video demo of the html app. There is no audio. The video is explained in htmlAppDemo.txt
	
htmlAppDemo.txt
	This file explains what the htmlAppDemo.mp4 video is about, and then has a brief paragraph
	summarizing what happens in the video.

lockDemo.mp4
	Video demo of physical locking mechanism. There is no audio. The video is explained in
	lockDemo.txt
	
lockDemo.txt
	This file explains what the lockDemo.mp4 video is about, and then has a brief paragraph
	summarizing what happens in the video.

README.txt
	The current file you have opened.
